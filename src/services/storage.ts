import fs from "fs";
import path from "path";

const STORAGE_FILE = path.resolve(__dirname, "../../processed_responses.json");

interface ProcessedResponse {
  processedAt: string;
  vacancyId: string;
}

interface Storage {
  responses: {
    [key: string]: ProcessedResponse;
  };
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
function loadStorage(): Storage {
  try {
    console.log("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ processed_responses.json...");
    if (fs.existsSync(STORAGE_FILE)) {
      const data = fs.readFileSync(STORAGE_FILE, "utf-8");
      const storage = JSON.parse(data);
      console.log(
        `‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ ${
          Object.keys(storage.responses).length
        } –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤`
      );
      return storage;
    } else {
      console.log("‚ö†Ô∏è –§–∞–π–ª processed_responses.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π");
      return { responses: {} };
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
    return { responses: {} };
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
function saveStorage(storage: Storage): void {
  try {
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª processed_responses.json...");
    fs.writeFileSync(STORAGE_FILE, JSON.stringify(storage, null, 2));
    console.log("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç–∫–ª–∏–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
export async function isResponseProcessed(
  responseId: string
): Promise<boolean> {
  const storage = loadStorage();
  const isProcessed = !!storage.responses[responseId];
  console.log(
    isProcessed
      ? `‚úÖ –û—Ç–∫–ª–∏–∫ ${responseId} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`
      : `‚ùå –û—Ç–∫–ª–∏–∫ ${responseId} –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`
  );
  return isProcessed;
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –æ—Ç–∫–ª–∏–∫–µ
export async function saveProcessedResponse(
  responseId: string,
  vacancyId: string
): Promise<void> {
  const storage = loadStorage();
  storage.responses[responseId] = {
    processedAt: new Date().toISOString(),
    vacancyId,
  };
  saveStorage(storage);
  console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∫–ª–∏–∫–µ ${responseId}`);
}
