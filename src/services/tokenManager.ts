import fs from "fs";
import path from "path";

const tokenPath = path.resolve(__dirname, "../../tokens.json");

export function loadTokens(): { access_token: string; refresh_token: string } {
  try {
    console.log("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ tokens.json...");
    if (fs.existsSync(tokenPath)) {
      const data = fs.readFileSync(tokenPath, "utf-8");
      const tokens = JSON.parse(data);
      console.log("‚úÖ –§–∞–π–ª tokens.json –∑–∞–≥—Ä—É–∂–µ–Ω");
      return tokens;
    } else {
      console.log("‚ö†Ô∏è –§–∞–π–ª tokens.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env");
      return {
        access_token: process.env.HH_ACCESS_TOKEN || "",
        refresh_token: process.env.HH_REFRESH_TOKEN || "",
      };
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:", error);
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env
    return {
      access_token: process.env.HH_ACCESS_TOKEN || "",
      refresh_token: process.env.HH_REFRESH_TOKEN || "",
    };
  }
}

export function saveTokens(accessToken: string, refreshToken: string): void {
  try {
    const data = {
      access_token: accessToken,
      refresh_token: refreshToken,
    };
    fs.writeFileSync(tokenPath, JSON.stringify(data, null, 2), "utf-8");
    console.log("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ tokens.json");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:", error);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å refresh token
export function checkTokenExpiry(): void {
  try {
    if (fs.existsSync(tokenPath)) {
      const data = JSON.parse(fs.readFileSync(tokenPath, "utf-8"));
      const lastModified = fs.statSync(tokenPath).mtime;
      const daysSinceUpdate =
        (Date.now() - lastModified.getTime()) / (1000 * 60 * 60 * 24);

      if (daysSinceUpdate > 25) {
        console.log("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Refresh token –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏!");
        console.log(
          `üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastModified.toLocaleDateString()}`
        );
        console.log("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ hh.ru");
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–æ–≤:", error);
  }
}
