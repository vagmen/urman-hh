import { config } from "dotenv";
import axios from "axios";
import { BASE_URL, NEGOTIATION_STATUSES } from "../config";
import type {
  HHResponse,
  HHVacancy,
  HHVacanciesResponse,
  HHResumeDetails,
} from "../types/hh";
import { handlePlanfixTaskCreation } from "./planfix";
import { isResponseProcessed, saveProcessedResponse } from "./storage";

config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É

// let accessToken: string = process.env.HH_ACCESS_TOKEN || "";
let accessToken = process.env.HH_ACCESS_TOKEN;
let refreshToken: string = process.env.HH_REFRESH_TOKEN || "";

async function refreshAccessToken(): Promise<boolean> {
  try {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");
    const response = await axios.post("https://hh.ru/oauth/token", null, {
      params: {
        grant_type: "refresh_token",
        client_id: process.env.HH_CLIENT_ID,
        client_secret: process.env.HH_CLIENT_SECRET,
        refresh_token: refreshToken,
      },
    });

    if (response.data.access_token) {
      accessToken = response.data.access_token;
      refreshToken = response.data.refresh_token;
      console.log("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
      return true;
    }
    return false;
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:",
      axios.isAxiosError(error) ? error.response?.data : error
    );
    return false;
  }
}

async function getCompanyVacancies(): Promise<HHVacancy[]> {
  console.log("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∫–æ–º–ø–∞–Ω–∏–∏...");
  try {
    const response = await axios.get<HHVacanciesResponse>(
      `${BASE_URL}/vacancies`,
      {
        params: {
          employer_id: "2487043",
          per_page: 100,
        },
        headers: {
          "HH-User-Agent": "URMAN HH API/1.0 (proekt@urman.su)",
        },
      }
    );

    if (response.status === 200) {
      console.log(
        `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.items.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`
      );
      return response.data.items;
    }
    console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞");
    return [];
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:",
      axios.isAxiosError(error) ? error.response?.data : error
    );
    return [];
  }
}

async function getResumeDetails(
  resumeId: string
): Promise<HHResumeDetails | null> {
  try {
    if (!accessToken) {
      console.log("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞");
      return null;
    }

    const response = await axios.get<HHResumeDetails>(
      `${BASE_URL}/resumes/${resumeId}`,
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "HH-User-Agent": "URMAN HH API/1.0 (proekt@urman.su)",
        },
      }
    );

    if (response.status === 200) {
      return response.data;
    }
    return null;
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∑—é–º–µ:",
      axios.isAxiosError(error) ? error.response?.data : error
    );
    return null;
  }
}

export async function getNewResponses(): Promise<void> {
  console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤...");
  try {
    const vacancies = await getCompanyVacancies();

    if (!vacancies.length) {
      console.log("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
      return;
    }

    console.log("üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:");
    vacancies.forEach((v) => console.log(`- ${v.name} (ID: ${v.id})`));

    for (const vacancy of vacancies) {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ${vacancy.name}`);

      try {
        if (!accessToken) {
          console.log("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞");
          return;
        }

        const authHeader = `Bearer ${accessToken}`;

        const response = await axios.get<HHResponse>(
          `${BASE_URL}/negotiations/response`,
          {
            headers: {
              Authorization: authHeader,
              "HH-User-Agent": "URMAN HH API/1.0 (proekt@urman.su)",
            },
            params: {
              status: NEGOTIATION_STATUSES.ALL.id,
              vacancy_id: vacancy.id,
              page: 0,
              per_page: 20,
              order: "asc",
            },
          }
        );

        if (response.status === 200) {
          const { items } = response.data;
          if (!items?.length) {
            console.log(`üîé –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ${vacancy.name}`);
            continue;
          }
          console.log(`üì© –ù–æ–≤—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ${vacancy.name}`);
          for (const item of items) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –æ—Ç–∫–ª–∏–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            const isProcessed = await isResponseProcessed(item.id);
            if (isProcessed) {
              console.log(
                `‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª–∏–∫ –æ—Ç ${item.resume.first_name} ${item.resume.last_name} (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)`
              );
              continue;
            }

            const { resume } = item;
            // console.log("\nüìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∞:");
            // console.log(JSON.stringify(item, null, 2));
            // console.log("\nüìÑ –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ:");
            // console.log(JSON.stringify(resume, null, 2));

            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—é–º–µ
            const resumeDetails = await getResumeDetails(
              resume.alternate_url.split("/").pop() || ""
            );
            let phone = "";

            if (resumeDetails?.contact) {
              const phoneContact = resumeDetails.contact.find(
                (c) => c.type.id === "cell" || c.type.id === "phone"
              );

              if (phoneContact && typeof phoneContact.value === "object") {
                phone = phoneContact.value.formatted;
              }
            }

            // console.log(
            //   "resumeDetails",
            //   JSON.stringify(resumeDetails?.contact, null, 2)
            // );

            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Planfix
            try {
              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –æ—Ç—Ä–∞—Å–ª—å—é
              const experience =
                resume.experience
                  ?.map((exp) => {
                    const dates = `${exp.start} - ${
                      exp.end || "–ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è"
                    }`;
                    const industry = exp.industries?.[0]?.name || "";
                    return `${dates}: ${exp.position} –≤ ${exp.company} (${industry})`;
                  })
                  .join("\n") || "";

              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
              const education =
                resume.education?.primary
                  ?.map(
                    (edu) =>
                      `${edu.year}: ${edu.name}, ${edu.organization}, ${edu.result}`
                  )
                  .join("\n") || "";

              // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –æ–ø—ã—Ç –≤ –≥–æ–¥–∞—Ö
              const totalExperienceYears = Math.floor(
                (resume.total_experience?.months || 0) / 12
              );

              await handlePlanfixTaskCreation({
                name: `–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ${vacancy.name}`,
                description: `
              <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ</h2>
              <b>${resume.first_name} ${resume.middle_name || ""} ${
                  resume.last_name
                }</b>

              <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
              <ul>
                <li>üéØ –ü–æ–∑–∏—Ü–∏—è: ${resume.title}</li>
                <li>üìç –õ–æ–∫–∞—Ü–∏—è: ${resume.area?.name || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}</li>
                <li>üë§ –í–æ–∑—Ä–∞—Å—Ç: ${resume.age || "–ù–µ —É–∫–∞–∑–∞–Ω"}</li>
                <li>‚è≥ –û–±—â–∏–π –æ–ø—ã—Ç: ${totalExperienceYears} –ª–µ—Ç</li>
              </ul>

              <h3>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h3>
              <pre>${education}</pre>

              <h3>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</h3>
              <pre>${experience}</pre>

              <h3>–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è</h3>
              ${
                resume.salary
                  ? `<p>üí∞ ${resume.salary.amount} ${resume.salary.currency}</p>`
                  : `<p>‚ùå –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>`
              }

              <p><a href="${
                resume.alternate_url
              }">üîó –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—é–º–µ –Ω–∞ HH.ru</a></p>
              `.trim(),
                priority: "2. –ù–∞ –Ω–µ–¥–µ–ª–µ",
                contactData: {
                  name: `${resume.first_name} ${resume.middle_name || ""} ${
                    resume.last_name
                  }`,
                  position: resume.title,
                  projects: [],
                  //   projects:
                  //     resume.experience
                  //       ?.map((exp) => exp.industries?.[0]?.name)
                  //       .filter(Boolean) || [],
                  software: [],
                  otherSkills: `–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${totalExperienceYears} –ª–µ—Ç\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ${
                    resume.education?.level?.name || ""
                  }`,
                  phone: phone, // –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
                },
              });

              // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –æ—Ç–∫–ª–∏–∫–µ
              await saveProcessedResponse(item.id, vacancy.id);
              console.log(
                `‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è ${resume.first_name} ${resume.last_name}`
              );
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:`, error);
            }
          }
        }
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.name}:`,
          axios.isAxiosError(error) ? error.response?.data : error
        );
      }
    }
    console.log("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  } catch (error) {
    console.error(
      "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤:",
      axios.isAxiosError(error) ? error.response?.data : error
    );
  }
}
